name: Nightly

on:
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  call-build-wheels:
    strategy:
      fail-fast: false
      matrix:
        rocm-version: ["6.4.1", "7.0.0"]
        include:
          - rocm-version: "6.4.1"
            runner-label: "mi-250"
          - rocm-version: "7.0.0"
            rocm-build-job: "compute-rocm-dkms-no-npi-hipclang"
            rocm-build-num: "16322"
            runner-label: "internal"
    uses: ./.github/workflows/build-wheels.yml
    with:
      python-versions: "3.10,3.12"
      rocm-version: ${{ matrix.rocm-version }}
      rocm-build-job: ${{ matrix.rocm-build-job }}
      rocm-build-num: ${{ matrix.rocm-build-num }}
      runner-label: ${{ matrix.runner-label }}
  call-build-docker:
    needs: call-build-wheels
    strategy:
      fail-fast: false
      matrix:
        rocm-version: ["6.4.1", "7.0.0"]
        include:
          - rocm-version: "6.4.1"
            runner-label: "mi-250"
          - rocm-version: "7.0.0"
            rocm-build-job: "compute-rocm-dkms-no-npi-hipclang"
            rocm-build-num: "16322"
            runner-label: "internal"
    uses: ./.github/workflows/build-docker.yml
    with:
      rocm-version: ${{ matrix.rocm-version }}
      rocm-build-job: ${{ matrix.rocm-build-job }}
      rocm-build-num: ${{ matrix.rocm-build-num }}
      runner-label: ${{ matrix.runner-label }}
      extra-cr-tag: "nightly"
  run-python-unit-tests:
    needs: call-build-docker
    runs-on: mi-250
    strategy:
      fail-fast: false
      matrix:
        rocm-version: ["6.4.1", "7.0.0"]
        ubuntu-version: ["22", "24"]
        test_file:
          - tests/sparse_test.py
          - tests/linalg_test.py
    steps:
      - name: Change owners for cleanup
        run: |
          docker run --rm -v "./:/rocm-jax" ubuntu /bin/bash -c "chown -R $UID /rocm-jax/* || true"
      - name: Checkout plugin repo
        uses: actions/checkout@v4
      - name: Checkout JAX repo
        uses: actions/checkout@v4
        with:
          # TODO: Load the ref from a file that sets the min and max JAX version
          # TODO: Change the repo and ref once we figure out how exactly we're going to
          #       manage tests
          repository: rocm/jax
          ref: rocm-jaxlib-v0.6.0
          path: jax
      - name: Authenticate to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" \
            | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Create directory for test logs
        run: mkdir -p jax/test_logs
      - name: Run test with JSON report ${{ matrix.test_file }}
        if: always()
        env:
          GPU_COUNT: "8"
          GFX: "gfx90a"
          ROCM_VERSION: ${{ matrix.rocm-version }}
          UBUNTU_VERSION: ${{ matrix.ubuntu-version }}
        run: |
          FILENAME=$(basename "${{ matrix.test_file }}" .py)
          TESTNAME="test-report-${FILENAME}_rocm${ROCM_VERSION//.}_ubu${UBUNTU_VERSION}"
          python3 build/ci_build test \
            "ghcr.io/rocm/jax-ubu${UBUNTU_VERSION}.rocm${ROCM_VERSION//.}:${GITHUB_SHA}" \
            --test-cmd "pytest --json-report --json-report-file=/jax/test_logs/${TESTNAME}.json ${{ matrix.test_file }}" || true
      - name: Compute TESTNAME for artifact
        id: compute
        run: |
          ROCM_VERSION="${{ matrix.rocm-version }}"
          UBUNTU_VERSION="${{ matrix.ubuntu-version }}"
          FILENAME=$(basename "${{ matrix.test_file }}" .py)
          TESTNAME="test-report-${FILENAME}_rocm${ROCM_VERSION//.}_ubu${UBUNTU_VERSION}"
          echo "testname=$TESTNAME" >> $GITHUB_OUTPUT
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.compute.outputs.testname }}
          path: jax/test_logs/${{ steps.compute.outputs.testname }}.json
          if-no-files-found: ignore
